<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="scitokens_8h" kind="file" language="C++">
    <compoundname>scitokens.h</compoundname>
    <includes local="no">sys/select.h</includes>
    <includes local="no">time.h</includes>
    <includes local="no">ctime</includes>
    <incdepgraph>
      <node id="1">
        <label>src/scitokens.h</label>
        <link refid="scitokens_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>ctime</label>
      </node>
      <node id="2">
        <label>sys/select.h</label>
      </node>
      <node id="3">
        <label>time.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structAcl__s" prot="public">Acl_s</innerclass>
    <sectiondef kind="enum">
      <memberdef kind="enum" id="scitokens_8h_1a4bfa5d5157bd4a94e24b8fc265f53275" prot="public" static="no" strong="no">
        <type></type>
        <name>_profile</name>
        <enumvalue id="scitokens_8h_1a4bfa5d5157bd4a94e24b8fc265f53275aa9689eb5b95db5a9e7463157f64b7f6b" prot="public">
          <name>COMPAT</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="scitokens_8h_1a4bfa5d5157bd4a94e24b8fc265f53275a93f64ddf1e103cc7888320ae6f9ae83e" prot="public">
          <name>SCITOKENS_1_0</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="scitokens_8h_1a4bfa5d5157bd4a94e24b8fc265f53275ab64ec25ac42e7f70db85d90f34f98224" prot="public">
          <name>SCITOKENS_2_0</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="scitokens_8h_1a4bfa5d5157bd4a94e24b8fc265f53275a3b0f1383e2fc8faa60b53a369b51a0f1" prot="public">
          <name>WLCG_1_0</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="scitokens_8h_1a4bfa5d5157bd4a94e24b8fc265f53275a6cc7da2f659e5a4eb02eb4774ce60beb" prot="public">
          <name>AT_JWT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine the mode we will use to validate tokens.<itemizedlist>
<listitem><para>COMPAT mode (default) indicates any supported token format is acceptable. Where possible, the scope names are translated into equivalent SciTokens 1.0 claim names (i.e., storage.read -&gt; read; storage.write -&gt; write). If a typ header claim is present, use that to deduce type (RFC8725 Section 3.11).</para>
</listitem><listitem><para>SCITOKENS_1_0, SCITOKENS_2_0, WLCG_1_0, AT_JWT: only accept these specific profiles. No automatic translation is performed. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scitokens.h" line="54" column="1" bodyfile="src/scitokens.h" bodystart="54" bodyend="60"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="scitokens_8h_1a587a66c3a77d6bd135a3d210f1614220" prot="public" static="no">
        <type>void *</type>
        <definition>typedef void* SciTokenKey</definition>
        <argsstring></argsstring>
        <name>SciTokenKey</name>
        <briefdescription>
<para>Opaque handle for cryptographic keys used to sign/verify tokens. </para>
        </briefdescription>
        <detaileddescription>
<para>Public header for the SciTokens C library. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scitokens.h" line="18" column="14" bodyfile="src/scitokens.h" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="scitokens_8h_1af42aab75f8c96643c24f6922e6bb546d" prot="public" static="no">
        <type>void *</type>
        <definition>typedef void* SciToken</definition>
        <argsstring></argsstring>
        <name>SciToken</name>
        <briefdescription>
<para>Opaque handle for SciToken objects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scitokens.h" line="21" column="14" bodyfile="src/scitokens.h" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="scitokens_8h_1ab02e75e88eafda93af6ac5e38a3c32a8" prot="public" static="no">
        <type>void *</type>
        <definition>typedef void* Validator</definition>
        <argsstring></argsstring>
        <name>Validator</name>
        <briefdescription>
<para>Opaque handle for token validators. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scitokens.h" line="24" column="14" bodyfile="src/scitokens.h" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="scitokens_8h_1a67e3f436486f4d886f493310ff50bb7b" prot="public" static="no">
        <type>void *</type>
        <definition>typedef void* Enforcer</definition>
        <argsstring></argsstring>
        <name>Enforcer</name>
        <briefdescription>
<para>Opaque handle for token enforcers that generate ACLs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scitokens.h" line="27" column="14" bodyfile="src/scitokens.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="scitokens_8h_1a2f79f28f77ae8ea8b7b66e6f72d6e7a8" prot="public" static="no">
        <type>void *</type>
        <definition>typedef void* SciTokenStatus</definition>
        <argsstring></argsstring>
        <name>SciTokenStatus</name>
        <briefdescription>
<para>Opaque handle for asynchronous operation status. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scitokens.h" line="30" column="14" bodyfile="src/scitokens.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="scitokens_8h_1a6fe41a8d0dccc8c9a9243a4f3b553f3d" prot="public" static="no">
        <type>void *</type>
        <definition>typedef void* Configuration</definition>
        <argsstring></argsstring>
        <name>Configuration</name>
        <briefdescription>
<para>Opaque handle for configuration objects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scitokens.h" line="33" column="14" bodyfile="src/scitokens.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="scitokens_8h_1a3105db886f42ff8390bdb3c6bb34c847" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* StringValidatorFunction) (const char *value, char **err_msg)</definition>
        <argsstring>)(const char *value, char **err_msg)</argsstring>
        <name>StringValidatorFunction</name>
        <briefdescription>
<para>Function pointer type for custom string validation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scitokens.h" line="36" column="9" bodyfile="src/scitokens.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="scitokens_8h_1ac4ba04e6f47ce20a0e59849a8d719f65" prot="public" static="no">
        <type>struct <ref refid="structAcl__s" kindref="compound">Acl_s</ref></type>
        <definition>typedef struct Acl_s Acl</definition>
        <argsstring></argsstring>
        <name>Acl</name>
        <briefdescription>
<para>Access Control List entry containing authorization and resource. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scitokens.h" line="42" column="5"/>
      </memberdef>
      <memberdef kind="typedef" id="scitokens_8h_1a8b04b0809d15e808d582c78f1b3685e5" prot="public" static="no">
        <type>enum <ref refid="scitokens_8h_1a4bfa5d5157bd4a94e24b8fc265f53275" kindref="member">_profile</ref></type>
        <definition>typedef enum _profile SciTokenProfile</definition>
        <argsstring></argsstring>
        <name>SciTokenProfile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine the mode we will use to validate tokens.<itemizedlist>
<listitem><para>COMPAT mode (default) indicates any supported token format is acceptable. Where possible, the scope names are translated into equivalent SciTokens 1.0 claim names (i.e., storage.read -&gt; read; storage.write -&gt; write). If a typ header claim is present, use that to deduce type (RFC8725 Section 3.11).</para>
</listitem><listitem><para>SCITOKENS_1_0, SCITOKENS_2_0, WLCG_1_0, AT_JWT: only accept these specific profiles. No automatic translation is performed. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scitokens.h" line="60" column="17"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="scitokens_8h_1a4dbf10b0bb5056c4fd9902a19a01d6ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="scitokens_8h_1a587a66c3a77d6bd135a3d210f1614220" kindref="member">SciTokenKey</ref></type>
        <definition>SciTokenKey scitoken_key_create</definition>
        <argsstring>(const char *key_id, const char *algorithm, const char *public_contents, const char *private_contents, char **err_msg)</argsstring>
        <name>scitoken_key_create</name>
        <param>
          <type>const char *</type>
          <declname>key_id</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>algorithm</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>public_contents</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>private_contents</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>err_msg</declname>
        </param>
        <briefdescription>
<para>Create a cryptographic key for signing tokens. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier for the key (used in &apos;kid&apos; header) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>algorithm</parametername>
</parameternamelist>
<parameterdescription>
<para>Signing algorithm (e.g., &quot;ES256&quot;, &quot;RS256&quot;) <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>public_contents</parametername>
</parameternamelist>
<parameterdescription>
<para>PEM-encoded public key </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>private_contents</parametername>
</parameternamelist>
<parameterdescription>
<para>PEM-encoded private key </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>err_msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Output parameter for error messages (caller must free) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SciTokenKey handle on success, NULL on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scitokens.h" line="72" column="13" declfile="src/scitokens.h" declline="72" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="scitokens_8h_1a750fdd61f0d8469572b54086f7942d5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void scitoken_key_destroy</definition>
        <argsstring>(SciTokenKey private_key)</argsstring>
        <name>scitoken_key_destroy</name>
        <param>
          <type><ref refid="scitokens_8h_1a587a66c3a77d6bd135a3d210f1614220" kindref="member">SciTokenKey</ref></type>
          <declname>private_key</declname>
        </param>
        <briefdescription>
<para>Destroy a key object and free associated memory. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>private_key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key handle to destroy </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scitokens.h" line="81" column="6" declfile="src/scitokens.h" declline="81" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="scitokens_8h_1ad81d603a6e2564fbfdcd30c633023dac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="scitokens_8h_1af42aab75f8c96643c24f6922e6bb546d" kindref="member">SciToken</ref></type>
        <definition>SciToken scitoken_create</definition>
        <argsstring>(SciTokenKey private_key)</argsstring>
        <name>scitoken_create</name>
        <param>
          <type><ref refid="scitokens_8h_1a587a66c3a77d6bd135a3d210f1614220" kindref="member">SciTokenKey</ref></type>
          <declname>private_key</declname>
        </param>
        <briefdescription>
<para>Create a new SciToken. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>private_key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key to use for signing, or NULL for unsigned token </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SciToken handle on success, NULL on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scitokens.h" line="89" column="10" declfile="src/scitokens.h" declline="89" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="scitokens_8h_1ad0d43266bf02f5b048d3c9c156434097" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void scitoken_destroy</definition>
        <argsstring>(SciToken token)</argsstring>
        <name>scitoken_destroy</name>
        <param>
          <type><ref refid="scitokens_8h_1af42aab75f8c96643c24f6922e6bb546d" kindref="member">SciToken</ref></type>
          <declname>token</declname>
        </param>
        <briefdescription>
<para>Destroy a token object and free associated memory. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Token handle to destroy </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scitokens.h" line="96" column="6" declfile="src/scitokens.h" declline="96" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="scitokens_8h_1ae91f44c6c823e590e65d2d0fbf308d96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int scitoken_set_claim_string</definition>
        <argsstring>(SciToken token, const char *key, const char *value, char **err_msg)</argsstring>
        <name>scitoken_set_claim_string</name>
        <param>
          <type><ref refid="scitokens_8h_1af42aab75f8c96643c24f6922e6bb546d" kindref="member">SciToken</ref></type>
          <declname>token</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>err_msg</declname>
        </param>
        <briefdescription>
<para>Set a string claim in the token. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Token to modify </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Claim name (e.g., &quot;iss&quot;, &quot;aud&quot;, &quot;scope&quot;) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Claim value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>err_msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Output parameter for error messages (caller must free) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, non-zero on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scitokens.h" line="107" column="5" declfile="src/scitokens.h" declline="107" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="scitokens_8h_1abd4ddf5a52941cdff128398f8fe093a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int scitoken_get_claim_string</definition>
        <argsstring>(const SciToken token, const char *key, char **value, char **err_msg)</argsstring>
        <name>scitoken_get_claim_string</name>
        <param>
          <type>const <ref refid="scitokens_8h_1af42aab75f8c96643c24f6922e6bb546d" kindref="member">SciToken</ref></type>
          <declname>token</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>value</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>err_msg</declname>
        </param>
        <briefdescription>
<para>Get a string claim from the token. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Token to query </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Claim name to retrieve </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Output parameter for claim value (caller must free) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>err_msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Output parameter for error messages (caller must free) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, non-zero on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scitokens.h" line="119" column="5" declfile="src/scitokens.h" declline="119" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="scitokens_8h_1a89974e03db4aa01d1e8441df7bd582a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int scitoken_get_claim_string_list</definition>
        <argsstring>(const SciToken token, const char *key, char ***value, char **err_msg)</argsstring>
        <name>scitoken_get_claim_string_list</name>
        <param>
          <type>const <ref refid="scitokens_8h_1af42aab75f8c96643c24f6922e6bb546d" kindref="member">SciToken</ref></type>
          <declname>token</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>char ***</type>
          <declname>value</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>err_msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Given a SciToken object, parse a specific claim&apos;s value as a list of strings. If the JSON value is not actually a list of strings - or the claim is not set<itemizedlist>
<listitem><para>returns an error and sets the err_msg appropriately.</para>
</listitem></itemizedlist>
</para>
<para>The returned value is a list of strings that ends with a nullptr. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scitokens.h" line="129" column="5" declfile="src/scitokens.h" declline="129" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="scitokens_8h_1aefb528bc5ba18e8f1a9ac559093f1738" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void scitoken_free_string_list</definition>
        <argsstring>(char **value)</argsstring>
        <name>scitoken_free_string_list</name>
        <param>
          <type>char **</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Given a list of strings that was returned by scitoken_get_claim_string_list, free all the associated memory. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scitokens.h" line="136" column="6" declfile="src/scitokens.h" declline="136" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="scitokens_8h_1ae4f779b5b5548f83b8510ce53117513e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int scitoken_set_claim_string_list</definition>
        <argsstring>(const SciToken token, const char *key, const char **values, char **err_msg)</argsstring>
        <name>scitoken_set_claim_string_list</name>
        <param>
          <type>const <ref refid="scitokens_8h_1af42aab75f8c96643c24f6922e6bb546d" kindref="member">SciToken</ref></type>
          <declname>token</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>values</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>err_msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the value of a claim to a list of strings. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scitokens.h" line="141" column="5" declfile="src/scitokens.h" declline="141" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="scitokens_8h_1a73d8774fa14c47a548de7c997c72599c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int scitoken_get_expiration</definition>
        <argsstring>(const SciToken token, long long *value, char **err_msg)</argsstring>
        <name>scitoken_get_expiration</name>
        <param>
          <type>const <ref refid="scitokens_8h_1af42aab75f8c96643c24f6922e6bb546d" kindref="member">SciToken</ref></type>
          <declname>token</declname>
        </param>
        <param>
          <type>long long *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>err_msg</declname>
        </param>
        <briefdescription>
<para>Get the expiration time of the token. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Token to query </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Output parameter for expiration time (Unix timestamp) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>err_msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Output parameter for error messages (caller must free) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, non-zero on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scitokens.h" line="152" column="5" declfile="src/scitokens.h" declline="152" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="scitokens_8h_1a66fbf38d2995020f35a09cce156460c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void scitoken_set_lifetime</definition>
        <argsstring>(SciToken token, int lifetime)</argsstring>
        <name>scitoken_set_lifetime</name>
        <param>
          <type><ref refid="scitokens_8h_1af42aab75f8c96643c24f6922e6bb546d" kindref="member">SciToken</ref></type>
          <declname>token</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lifetime</declname>
        </param>
        <briefdescription>
<para>Set the lifetime of the token in seconds. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Token to modify </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lifetime</parametername>
</parameternamelist>
<parameterdescription>
<para>Lifetime in seconds from creation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scitokens.h" line="161" column="6" declfile="src/scitokens.h" declline="161" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="scitokens_8h_1a4af64201c33cfffcd0ee0fa1b902722a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int scitoken_serialize</definition>
        <argsstring>(const SciToken token, char **value, char **err_msg)</argsstring>
        <name>scitoken_serialize</name>
        <param>
          <type>const <ref refid="scitokens_8h_1af42aab75f8c96643c24f6922e6bb546d" kindref="member">SciToken</ref></type>
          <declname>token</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>value</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>err_msg</declname>
        </param>
        <briefdescription>
<para>Serialize the token to a JWT string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Token to serialize </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Output parameter for JWT string (caller must free) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>err_msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Output parameter for error messages (caller must free) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, non-zero on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scitokens.h" line="171" column="5" declfile="src/scitokens.h" declline="171" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="scitokens_8h_1ad25cde94a1e1013c0ccaf2e4d9a7bf79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void scitoken_set_serialize_profile</definition>
        <argsstring>(SciToken token, SciTokenProfile profile)</argsstring>
        <name>scitoken_set_serialize_profile</name>
        <param>
          <type><ref refid="scitokens_8h_1af42aab75f8c96643c24f6922e6bb546d" kindref="member">SciToken</ref></type>
          <declname>token</declname>
        </param>
        <param>
          <type><ref refid="scitokens_8h_1a8b04b0809d15e808d582c78f1b3685e5" kindref="member">SciTokenProfile</ref></type>
          <declname>profile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the profile used for serialization; if COMPAT mode is used, then the library default is utilized (currently, scitokens 1.0). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scitokens.h" line="177" column="6" declfile="src/scitokens.h" declline="177" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="scitokens_8h_1a210865a2ec1211c9fa1bf467f4105fdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void scitoken_set_serialize_mode</definition>
        <argsstring>(SciToken token, SciTokenProfile profile)</argsstring>
        <name>scitoken_set_serialize_mode</name>
        <param>
          <type><ref refid="scitokens_8h_1af42aab75f8c96643c24f6922e6bb546d" kindref="member">SciToken</ref></type>
          <declname>token</declname>
        </param>
        <param>
          <type><ref refid="scitokens_8h_1a8b04b0809d15e808d582c78f1b3685e5" kindref="member">SciTokenProfile</ref></type>
          <declname>profile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scitokens.h" line="179" column="6" declfile="src/scitokens.h" declline="179" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="scitokens_8h_1af91b6e7b145cb3c6ed98ee8096d719a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void scitoken_set_deserialize_profile</definition>
        <argsstring>(SciToken token, SciTokenProfile profile)</argsstring>
        <name>scitoken_set_deserialize_profile</name>
        <param>
          <type><ref refid="scitokens_8h_1af42aab75f8c96643c24f6922e6bb546d" kindref="member">SciToken</ref></type>
          <declname>token</declname>
        </param>
        <param>
          <type><ref refid="scitokens_8h_1a8b04b0809d15e808d582c78f1b3685e5" kindref="member">SciTokenProfile</ref></type>
          <declname>profile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scitokens.h" line="181" column="6" declfile="src/scitokens.h" declline="181" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="scitokens_8h_1a9365ce06a8b29233e0881c4b4ad6ebc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int scitoken_deserialize</definition>
        <argsstring>(const char *value, SciToken *token, char const *const *allowed_issuers, char **err_msg)</argsstring>
        <name>scitoken_deserialize</name>
        <param>
          <type>const char *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="scitokens_8h_1af42aab75f8c96643c24f6922e6bb546d" kindref="member">SciToken</ref> *</type>
          <declname>token</declname>
        </param>
        <param>
          <type>char const *const *</type>
          <declname>allowed_issuers</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>err_msg</declname>
        </param>
        <briefdescription>
<para>Deserialize a JWT string into a SciToken. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>JWT string to parse </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Output parameter for created token (caller must destroy) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allowed_issuers</parametername>
</parameternamelist>
<parameterdescription>
<para>NULL-terminated array of allowed issuer URLs, or NULL for any </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>err_msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Output parameter for error messages (caller must free) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, non-zero on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scitokens.h" line="192" column="5" declfile="src/scitokens.h" declline="192" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="scitokens_8h_1a212eb0d2b5b0b37dbe054ea6266282e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int scitoken_deserialize_start</definition>
        <argsstring>(const char *value, SciToken *token, char const *const *allowed_issuers, SciTokenStatus *status, char **err_msg)</argsstring>
        <name>scitoken_deserialize_start</name>
        <param>
          <type>const char *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="scitokens_8h_1af42aab75f8c96643c24f6922e6bb546d" kindref="member">SciToken</ref> *</type>
          <declname>token</declname>
        </param>
        <param>
          <type>char const *const *</type>
          <declname>allowed_issuers</declname>
        </param>
        <param>
          <type><ref refid="scitokens_8h_1a2f79f28f77ae8ea8b7b66e6f72d6e7a8" kindref="member">SciTokenStatus</ref> *</type>
          <declname>status</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>err_msg</declname>
        </param>
        <briefdescription>
<para>Start the deserialization process for a token, returning a status object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The serialized token. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination for the token object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allowed_issuers</parametername>
</parameternamelist>
<parameterdescription>
<para>List of allowed issuers, or nullptr for no issuer check. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination for the status object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>err_msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination for error message. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int 0 on success, -1 on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scitokens.h" line="208" column="5" declfile="src/scitokens.h" declline="208" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="scitokens_8h_1ab2e60eda60afd8f26dc5eacabc0ba8ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int scitoken_deserialize_continue</definition>
        <argsstring>(SciToken *token, SciTokenStatus *status, char **err_msg)</argsstring>
        <name>scitoken_deserialize_continue</name>
        <param>
          <type><ref refid="scitokens_8h_1af42aab75f8c96643c24f6922e6bb546d" kindref="member">SciToken</ref> *</type>
          <declname>token</declname>
        </param>
        <param>
          <type><ref refid="scitokens_8h_1a2f79f28f77ae8ea8b7b66e6f72d6e7a8" kindref="member">SciTokenStatus</ref> *</type>
          <declname>status</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>err_msg</declname>
        </param>
        <briefdescription>
<para>Continue the deserialization process for a token, updating the status object. </para>
        </briefdescription>
        <detaileddescription>
<para>If the status object indicates that the token is complete, the token object will be populated and the status object will be nullptr.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>The token object, returned from scitoken_deserialize_start. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Status object for the deserialize. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>err_msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination for error message. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int 0 on success, -1 on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scitokens.h" line="225" column="5" declfile="src/scitokens.h" declline="225" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="scitokens_8h_1adaa0cf2c5a1bcaf1346ac6f232c3314b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int scitoken_deserialize_v2</definition>
        <argsstring>(const char *value, SciToken token, char const *const *allowed_issuers, char **err_msg)</argsstring>
        <name>scitoken_deserialize_v2</name>
        <param>
          <type>const char *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="scitokens_8h_1af42aab75f8c96643c24f6922e6bb546d" kindref="member">SciToken</ref></type>
          <declname>token</declname>
        </param>
        <param>
          <type>char const *const *</type>
          <declname>allowed_issuers</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>err_msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scitokens.h" line="228" column="5" declfile="src/scitokens.h" declline="228" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="scitokens_8h_1a6cb89ed8f671919775c4243c57bb8f4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int scitoken_store_public_ec_key</definition>
        <argsstring>(const char *issuer, const char *keyid, const char *value, char **err_msg)</argsstring>
        <name>scitoken_store_public_ec_key</name>
        <param>
          <type>const char *</type>
          <declname>issuer</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>keyid</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>err_msg</declname>
        </param>
        <briefdescription>
<para>Store a public EC key for token verification. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>issuer</parametername>
</parameternamelist>
<parameterdescription>
<para>Issuer URL that will use this key </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keyid</parametername>
</parameternamelist>
<parameterdescription>
<para>Key identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>PEM-encoded public key </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>err_msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Output parameter for error messages (caller must free) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, non-zero on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scitokens.h" line="240" column="5" declfile="src/scitokens.h" declline="240" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="scitokens_8h_1a263311bb27c645e91cc71cb6fd1b952f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="scitokens_8h_1ab02e75e88eafda93af6ac5e38a3c32a8" kindref="member">Validator</ref></type>
        <definition>Validator validator_create</definition>
        <argsstring>()</argsstring>
        <name>validator_create</name>
        <briefdescription>
<para>Create a new token validator. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Validator handle on success, NULL on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scitokens.h" line="248" column="11" declfile="src/scitokens.h" declline="248" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="scitokens_8h_1a5b025d947930fbb5a67151e142349c00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void validator_set_token_profile</definition>
        <argsstring>(Validator, SciTokenProfile profile)</argsstring>
        <name>validator_set_token_profile</name>
        <param>
          <type><ref refid="scitokens_8h_1ab02e75e88eafda93af6ac5e38a3c32a8" kindref="member">Validator</ref></type>
        </param>
        <param>
          <type><ref refid="scitokens_8h_1a8b04b0809d15e808d582c78f1b3685e5" kindref="member">SciTokenProfile</ref></type>
          <declname>profile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the profile used for validating the tokens; COMPAT (default) will accept any known token type while others will only support that specific profile. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scitokens.h" line="254" column="6" declfile="src/scitokens.h" declline="254" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="scitokens_8h_1a829a0927d87a41f590c2a28f366453d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int validator_set_time</definition>
        <argsstring>(Validator validator, time_t now, char **err_msg)</argsstring>
        <name>validator_set_time</name>
        <param>
          <type><ref refid="scitokens_8h_1ab02e75e88eafda93af6ac5e38a3c32a8" kindref="member">Validator</ref></type>
          <declname>validator</declname>
        </param>
        <param>
          <type>time_t</type>
          <declname>now</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>err_msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the time to use with the validator. Useful if you want to see if the token would have been valid at some time in the past. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scitokens.h" line="260" column="5" declfile="src/scitokens.h" declline="260" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="scitokens_8h_1a649fda36be429cc0334d6119ca5295a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int validator_add</definition>
        <argsstring>(Validator validator, const char *claim, StringValidatorFunction validator_func, char **err_msg)</argsstring>
        <name>validator_add</name>
        <param>
          <type><ref refid="scitokens_8h_1ab02e75e88eafda93af6ac5e38a3c32a8" kindref="member">Validator</ref></type>
          <declname>validator</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>claim</declname>
        </param>
        <param>
          <type><ref refid="scitokens_8h_1a3105db886f42ff8390bdb3c6bb34c847" kindref="member">StringValidatorFunction</ref></type>
          <declname>validator_func</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>err_msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scitokens.h" line="262" column="5" declfile="src/scitokens.h" declline="262" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="scitokens_8h_1a91fe842050c23da0c63fa5b7acfd2bf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int validator_add_critical_claims</definition>
        <argsstring>(Validator validator, const char **claims, char **err_msg)</argsstring>
        <name>validator_add_critical_claims</name>
        <param>
          <type><ref refid="scitokens_8h_1ab02e75e88eafda93af6ac5e38a3c32a8" kindref="member">Validator</ref></type>
          <declname>validator</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>claims</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>err_msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scitokens.h" line="265" column="5" declfile="src/scitokens.h" declline="265" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="scitokens_8h_1aba07f3045591e809d375a23ed8e54ec7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int validator_validate</definition>
        <argsstring>(Validator validator, SciToken scitoken, char **err_msg)</argsstring>
        <name>validator_validate</name>
        <param>
          <type><ref refid="scitokens_8h_1ab02e75e88eafda93af6ac5e38a3c32a8" kindref="member">Validator</ref></type>
          <declname>validator</declname>
        </param>
        <param>
          <type><ref refid="scitokens_8h_1af42aab75f8c96643c24f6922e6bb546d" kindref="member">SciToken</ref></type>
          <declname>scitoken</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>err_msg</declname>
        </param>
        <briefdescription>
<para>Validate a SciToken using the configured validator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>validator</parametername>
</parameternamelist>
<parameterdescription>
<para>Validator to use </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scitoken</parametername>
</parameternamelist>
<parameterdescription>
<para>Token to validate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>err_msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Output parameter for error messages (caller must free) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, non-zero on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scitokens.h" line="276" column="5" declfile="src/scitokens.h" declline="276" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="scitokens_8h_1a410e073dee71089ff9fc195e4509e217" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void validator_destroy</definition>
        <argsstring>(Validator validator)</argsstring>
        <name>validator_destroy</name>
        <param>
          <type><ref refid="scitokens_8h_1ab02e75e88eafda93af6ac5e38a3c32a8" kindref="member">Validator</ref></type>
          <declname>validator</declname>
        </param>
        <briefdescription>
<para>Destroy a validator object and free associated memory. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>validator</parametername>
</parameternamelist>
<parameterdescription>
<para>Validator handle to destroy </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scitokens.h" line="283" column="6" declfile="src/scitokens.h" declline="283" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="scitokens_8h_1ad76fa52f0bfdb9471b682cc8403a0d9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="scitokens_8h_1a67e3f436486f4d886f493310ff50bb7b" kindref="member">Enforcer</ref></type>
        <definition>Enforcer enforcer_create</definition>
        <argsstring>(const char *issuer, const char **audience, char **err_msg)</argsstring>
        <name>enforcer_create</name>
        <param>
          <type>const char *</type>
          <declname>issuer</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>audience</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>err_msg</declname>
        </param>
        <briefdescription>
<para>Create a new token enforcer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>issuer</parametername>
</parameternamelist>
<parameterdescription>
<para>Required issuer URL for tokens </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>audience</parametername>
</parameternamelist>
<parameterdescription>
<para>NULL-terminated array of acceptable audience values </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>err_msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Output parameter for error messages (caller must free) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Enforcer handle on success, NULL on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scitokens.h" line="293" column="10" declfile="src/scitokens.h" declline="293" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="scitokens_8h_1ae6a595539a4e67041f677ac3435c49fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enforcer_destroy</definition>
        <argsstring>(Enforcer enforcer)</argsstring>
        <name>enforcer_destroy</name>
        <param>
          <type><ref refid="scitokens_8h_1a67e3f436486f4d886f493310ff50bb7b" kindref="member">Enforcer</ref></type>
          <declname>enforcer</declname>
        </param>
        <briefdescription>
<para>Destroy an enforcer object and free associated memory. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enforcer</parametername>
</parameternamelist>
<parameterdescription>
<para>Enforcer handle to destroy </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scitokens.h" line="301" column="6" declfile="src/scitokens.h" declline="301" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="scitokens_8h_1a876354915918f184cb9be5e7a313e62c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enforcer_set_validate_profile</definition>
        <argsstring>(Enforcer, SciTokenProfile profile)</argsstring>
        <name>enforcer_set_validate_profile</name>
        <param>
          <type><ref refid="scitokens_8h_1a67e3f436486f4d886f493310ff50bb7b" kindref="member">Enforcer</ref></type>
        </param>
        <param>
          <type><ref refid="scitokens_8h_1a8b04b0809d15e808d582c78f1b3685e5" kindref="member">SciTokenProfile</ref></type>
          <declname>profile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the profile used for enforcing ACLs; when set to COMPAT (default), then the authorizations will be converted to SciTokens 1.0-style authorizations (so, WLCG&apos;s storage.read becomes read). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scitokens.h" line="308" column="6" declfile="src/scitokens.h" declline="308" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="scitokens_8h_1ad26cda252454892adcb502b3d37bd65b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int enforcer_set_time</definition>
        <argsstring>(Enforcer enf, time_t now, char **err_msg)</argsstring>
        <name>enforcer_set_time</name>
        <param>
          <type><ref refid="scitokens_8h_1a67e3f436486f4d886f493310ff50bb7b" kindref="member">Enforcer</ref></type>
          <declname>enf</declname>
        </param>
        <param>
          <type>time_t</type>
          <declname>now</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>err_msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the time to use with the enforcer. Useful if you want to see if the token would have been valid at some time in the past. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scitokens.h" line="314" column="5" declfile="src/scitokens.h" declline="314" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="scitokens_8h_1a58db5e24fc281c9392eb399e2b6db3e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int enforcer_generate_acls</definition>
        <argsstring>(const Enforcer enf, const SciToken scitokens, Acl **acls, char **err_msg)</argsstring>
        <name>enforcer_generate_acls</name>
        <param>
          <type>const <ref refid="scitokens_8h_1a67e3f436486f4d886f493310ff50bb7b" kindref="member">Enforcer</ref></type>
          <declname>enf</declname>
        </param>
        <param>
          <type>const <ref refid="scitokens_8h_1af42aab75f8c96643c24f6922e6bb546d" kindref="member">SciToken</ref></type>
          <declname>scitokens</declname>
        </param>
        <param>
          <type><ref refid="scitokens_8h_1ac4ba04e6f47ce20a0e59849a8d719f65" kindref="member">Acl</ref> **</type>
          <declname>acls</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>err_msg</declname>
        </param>
        <briefdescription>
<para>Generate Access Control Lists from a token. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enf</parametername>
</parameternamelist>
<parameterdescription>
<para>Enforcer to use </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scitokens</parametername>
</parameternamelist>
<parameterdescription>
<para>Token to process </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>acls</parametername>
</parameternamelist>
<parameterdescription>
<para>Output parameter for ACL array (caller must free with enforcer_acl_free) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>err_msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Output parameter for error messages (caller must free) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, non-zero on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scitokens.h" line="325" column="5" declfile="src/scitokens.h" declline="325" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="scitokens_8h_1a3112687b8b138b931988e935fb8153c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int enforcer_generate_acls_start</definition>
        <argsstring>(const Enforcer enf, const SciToken scitokens, SciTokenStatus *status, Acl **acls, char **err_msg)</argsstring>
        <name>enforcer_generate_acls_start</name>
        <param>
          <type>const <ref refid="scitokens_8h_1a67e3f436486f4d886f493310ff50bb7b" kindref="member">Enforcer</ref></type>
          <declname>enf</declname>
        </param>
        <param>
          <type>const <ref refid="scitokens_8h_1af42aab75f8c96643c24f6922e6bb546d" kindref="member">SciToken</ref></type>
          <declname>scitokens</declname>
        </param>
        <param>
          <type><ref refid="scitokens_8h_1a2f79f28f77ae8ea8b7b66e6f72d6e7a8" kindref="member">SciTokenStatus</ref> *</type>
          <declname>status</declname>
        </param>
        <param>
          <type><ref refid="scitokens_8h_1ac4ba04e6f47ce20a0e59849a8d719f65" kindref="member">Acl</ref> **</type>
          <declname>acls</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>err_msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The asynchronous versions of enforcer_generate_acls. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scitokens.h" line="331" column="5" declfile="src/scitokens.h" declline="331" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="scitokens_8h_1ae03e2edf4ed381643053aaeff71d92aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int enforcer_generate_acls_continue</definition>
        <argsstring>(const Enforcer enf, SciTokenStatus *status, Acl **acls, char **err_msg)</argsstring>
        <name>enforcer_generate_acls_continue</name>
        <param>
          <type>const <ref refid="scitokens_8h_1a67e3f436486f4d886f493310ff50bb7b" kindref="member">Enforcer</ref></type>
          <declname>enf</declname>
        </param>
        <param>
          <type><ref refid="scitokens_8h_1a2f79f28f77ae8ea8b7b66e6f72d6e7a8" kindref="member">SciTokenStatus</ref> *</type>
          <declname>status</declname>
        </param>
        <param>
          <type><ref refid="scitokens_8h_1ac4ba04e6f47ce20a0e59849a8d719f65" kindref="member">Acl</ref> **</type>
          <declname>acls</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>err_msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scitokens.h" line="334" column="5" declfile="src/scitokens.h" declline="334" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="scitokens_8h_1a0688be4b49995152aad85abca06376e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enforcer_acl_free</definition>
        <argsstring>(Acl *acls)</argsstring>
        <name>enforcer_acl_free</name>
        <param>
          <type><ref refid="scitokens_8h_1ac4ba04e6f47ce20a0e59849a8d719f65" kindref="member">Acl</ref> *</type>
          <declname>acls</declname>
        </param>
        <briefdescription>
<para>Free an array of ACLs returned by enforcer_generate_acls. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>acls</parametername>
</parameternamelist>
<parameterdescription>
<para>ACL array to free </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scitokens.h" line="342" column="6" declfile="src/scitokens.h" declline="342" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="scitokens_8h_1a5381f795b28a825e9cf3abf9b2b554fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int enforcer_test</definition>
        <argsstring>(const Enforcer enf, const SciToken sci, const Acl *acl, char **err_msg)</argsstring>
        <name>enforcer_test</name>
        <param>
          <type>const <ref refid="scitokens_8h_1a67e3f436486f4d886f493310ff50bb7b" kindref="member">Enforcer</ref></type>
          <declname>enf</declname>
        </param>
        <param>
          <type>const <ref refid="scitokens_8h_1af42aab75f8c96643c24f6922e6bb546d" kindref="member">SciToken</ref></type>
          <declname>sci</declname>
        </param>
        <param>
          <type>const <ref refid="scitokens_8h_1ac4ba04e6f47ce20a0e59849a8d719f65" kindref="member">Acl</ref> *</type>
          <declname>acl</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>err_msg</declname>
        </param>
        <briefdescription>
<para>Test if a token grants access for a specific ACL. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enf</parametername>
</parameternamelist>
<parameterdescription>
<para>Enforcer to use </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sci</parametername>
</parameternamelist>
<parameterdescription>
<para>Token to test </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>acl</parametername>
</parameternamelist>
<parameterdescription>
<para>ACL to test against </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>err_msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Output parameter for error messages (caller must free) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if access granted, non-zero if denied or error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scitokens.h" line="353" column="5" declfile="src/scitokens.h" declline="353" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="scitokens_8h_1a4932e9e9df2749746eb56f808a2cfef0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void scitoken_status_free</definition>
        <argsstring>(SciTokenStatus *status)</argsstring>
        <name>scitoken_status_free</name>
        <param>
          <type><ref refid="scitokens_8h_1a2f79f28f77ae8ea8b7b66e6f72d6e7a8" kindref="member">SciTokenStatus</ref> *</type>
          <declname>status</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scitokens.h" line="356" column="6" declfile="src/scitokens.h" declline="356" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="scitokens_8h_1ad9a299e17fc77f61424cb039bc94cc17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int scitoken_status_get_timeout_val</definition>
        <argsstring>(const SciTokenStatus *status, time_t expiry_time, struct timeval *timeout, char **err_msg)</argsstring>
        <name>scitoken_status_get_timeout_val</name>
        <param>
          <type>const <ref refid="scitokens_8h_1a2f79f28f77ae8ea8b7b66e6f72d6e7a8" kindref="member">SciTokenStatus</ref> *</type>
          <declname>status</declname>
        </param>
        <param>
          <type>time_t</type>
          <declname>expiry_time</declname>
        </param>
        <param>
          <type>struct timeval *</type>
          <declname>timeout</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>err_msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the suggested timeout val. After the timeout value has passed, the asynchronous operation should continue.</para>
<para><itemizedlist>
<listitem><para><computeroutput>expiry_time</computeroutput>: the expiration time (in Unix epoch seconds) for the operation in total. The returned timeout value will never take the operation past the expiration time. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scitokens.h" line="366" column="5" declfile="src/scitokens.h" declline="366" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="scitokens_8h_1a416e7d64316e805d82b36659499179b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int scitoken_status_get_read_fd_set</definition>
        <argsstring>(SciTokenStatus *status, fd_set **read_fd_set, char **err_msg)</argsstring>
        <name>scitoken_status_get_read_fd_set</name>
        <param>
          <type><ref refid="scitokens_8h_1a2f79f28f77ae8ea8b7b66e6f72d6e7a8" kindref="member">SciTokenStatus</ref> *</type>
          <declname>status</declname>
        </param>
        <param>
          <type>fd_set **</type>
          <declname>read_fd_set</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>err_msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the set of read file descriptors. This will return a borrowed pointer (whose lifetime matches the status object) pointing at a fd_set array of size FD_SETSIZE. Any file descriptors owned by the status operation will be set and the returned fd_set can be used for select() operations.</para>
<para>IMPLEMENTATION NOTE: If the file descriptor monitored by libcurl are too high to be stored in this set, libcurl should give a corresponding low timeout val (100ms) and effectively switch to polling. See: <ulink url="https://curl.se/libcurl/c/curl_multi_fdset.html">https://curl.se/libcurl/c/curl_multi_fdset.html</ulink> for more information. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scitokens.h" line="381" column="5" declfile="src/scitokens.h" declline="381" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="scitokens_8h_1ae7e3b771516aee94c2be1bf1f74a7f79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int scitoken_status_get_write_fd_set</definition>
        <argsstring>(SciTokenStatus *status, fd_set **write_fd_set, char **err_msg)</argsstring>
        <name>scitoken_status_get_write_fd_set</name>
        <param>
          <type><ref refid="scitokens_8h_1a2f79f28f77ae8ea8b7b66e6f72d6e7a8" kindref="member">SciTokenStatus</ref> *</type>
          <declname>status</declname>
        </param>
        <param>
          <type>fd_set **</type>
          <declname>write_fd_set</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>err_msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the set of write FDs; see documentation for scitoken_status_get_read_fd_set. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scitokens.h" line="388" column="5" declfile="src/scitokens.h" declline="388" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="scitokens_8h_1a4104ccf1a5e6ca1ebb59483d34a8a4ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int scitoken_status_get_exc_fd_set</definition>
        <argsstring>(SciTokenStatus *status, fd_set **exc_fd_set, char **err_msg)</argsstring>
        <name>scitoken_status_get_exc_fd_set</name>
        <param>
          <type><ref refid="scitokens_8h_1a2f79f28f77ae8ea8b7b66e6f72d6e7a8" kindref="member">SciTokenStatus</ref> *</type>
          <declname>status</declname>
        </param>
        <param>
          <type>fd_set **</type>
          <declname>exc_fd_set</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>err_msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the set of exception FDs; see documentation for scitoken_status_get_exc_fd_set. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scitokens.h" line="395" column="5" declfile="src/scitokens.h" declline="395" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="scitokens_8h_1a026202b7833d9f29cf997b3cf51865fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int scitoken_status_get_max_fd</definition>
        <argsstring>(const SciTokenStatus *status, int *max_fd, char **err_msg)</argsstring>
        <name>scitoken_status_get_max_fd</name>
        <param>
          <type>const <ref refid="scitokens_8h_1a2f79f28f77ae8ea8b7b66e6f72d6e7a8" kindref="member">SciTokenStatus</ref> *</type>
          <declname>status</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>max_fd</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>err_msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the maximum FD in the status set.</para>
<para>IMPLEMENTATION NOTE: If the max FD is -1 then it implies libcurl is something that cannot be modelled by a socket. In such a case, the libcurl docs suggest using a 100ms timeout for select operations. See <ulink url="https://curl.se/libcurl/c/curl_multi_fdset.html">https://curl.se/libcurl/c/curl_multi_fdset.html</ulink>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scitokens.h" line="406" column="5" declfile="src/scitokens.h" declline="406" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="scitokens_8h_1a2a93eb2527b4f2d12f422037efba137a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int keycache_refresh_jwks</definition>
        <argsstring>(const char *issuer, char **err_msg)</argsstring>
        <name>keycache_refresh_jwks</name>
        <param>
          <type>const char *</type>
          <declname>issuer</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>err_msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>API for explicity managing the key cache.</para>
<para>This manipulates the keycache for the current eUID. Refresh the JWKS in the keycache for a given issuer; the refresh will occur even if the JWKS is not otherwise due for updates.<itemizedlist>
<listitem><para>Returns 0 on success, nonzero on failure. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scitokens.h" line="420" column="5" declfile="src/scitokens.h" declline="420" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="scitokens_8h_1ac73ab6cec9a6378d073506d79c5e8df0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int keycache_get_cached_jwks</definition>
        <argsstring>(const char *issuer, char **jwks, char **err_msg)</argsstring>
        <name>keycache_get_cached_jwks</name>
        <param>
          <type>const char *</type>
          <declname>issuer</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>jwks</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>err_msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve the JWKS from the keycache for a given issuer.<itemizedlist>
<listitem><para>Returns 0 if successful, nonzero on failure.</para>
</listitem><listitem><para>If the existing JWKS has expired - or does not exist - this does not trigger a new download of the JWKS from the issuer. Instead, it will return a JWKS object with an empty set of keys.</para>
</listitem><listitem><para><computeroutput>jwks</computeroutput> is an output variable set to the contents of the JWKS in the key cache. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scitokens.h" line="431" column="5" declfile="src/scitokens.h" declline="431" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="scitokens_8h_1a2543dff33e38e440a1dd706ce288ac55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int keycache_set_jwks</definition>
        <argsstring>(const char *issuer, const char *jwks, char **err_msg)</argsstring>
        <name>keycache_set_jwks</name>
        <param>
          <type>const char *</type>
          <declname>issuer</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>jwks</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>err_msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Replace any existing key cache entry with one provided by the user. The expiration and next update time of the user-provided JWKS will utilize the same rules as a download from an issuer with no explicit cache lifetime directives.<itemizedlist>
<listitem><para><computeroutput>jwks</computeroutput> is value that will be set in the cache. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scitokens.h" line="440" column="5" declfile="src/scitokens.h" declline="440" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="scitokens_8h_1a1194e9e69a1e93cd5495a8feb64c7349" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int config_set_int</definition>
        <argsstring>(const char *key, int value, char **err_msg)</argsstring>
        <name>config_set_int</name>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>err_msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>APIs for managing scitokens configuration parameters. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scitokens.h" line="447" column="5" declfile="src/scitokens.h" declline="447" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="scitokens_8h_1ab86fa82e06a6326fd6697df99f01c4cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int scitoken_config_set_int</definition>
        <argsstring>(const char *key, int value, char **err_msg)</argsstring>
        <name>scitoken_config_set_int</name>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>err_msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Update scitokens int parameters. Takes in key/value pairs and assigns the input value to whatever configuration variable is indicated by the key. Returns 0 on success, and non-zero for invalid keys or values. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scitokens.h" line="455" column="5" declfile="src/scitokens.h" declline="455" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="scitokens_8h_1a573bb0aab076b67af2fc28c8072c80b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int config_get_int</definition>
        <argsstring>(const char *key, char **err_msg)</argsstring>
        <name>config_get_int</name>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>err_msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scitokens.h" line="458" column="5" declfile="src/scitokens.h" declline="458" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="scitokens_8h_1a1abe11e9e964dee82072f7090aa8dcb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int scitoken_config_get_int</definition>
        <argsstring>(const char *key, char **err_msg)</argsstring>
        <name>scitoken_config_get_int</name>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>err_msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get current scitokens int parameters. Returns the value associated with the supplied input key on success, and -1 on failure. This assumes there are no keys for which a negative return value is permissible. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scitokens.h" line="466" column="5" declfile="src/scitokens.h" declline="466" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="scitokens_8h_1aa98d71916cb5f97981b3fdb4097d9eff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int scitoken_config_set_str</definition>
        <argsstring>(const char *key, const char *value, char **err_msg)</argsstring>
        <name>scitoken_config_set_str</name>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>err_msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set current scitokens str parameters. Returns 0 on success, nonzero on failure </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scitokens.h" line="472" column="5" declfile="src/scitokens.h" declline="472" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="scitokens_8h_1a52cbd78251430971e9077e572ea81748" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int scitoken_config_get_str</definition>
        <argsstring>(const char *key, char **output, char **err_msg)</argsstring>
        <name>scitoken_config_get_str</name>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>output</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>err_msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get current scitokens str parameters. Returns 0 on success, nonzero on failure, and populates the value associated with the input key to output. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scitokens.h" line="479" column="5" declfile="src/scitokens.h" declline="479" declcolumn="5"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/select.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ctime&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="18" refid="scitokens_8h_1a587a66c3a77d6bd135a3d210f1614220" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="scitokens_8h_1a587a66c3a77d6bd135a3d210f1614220" kindref="member">SciTokenKey</ref>;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="scitokens_8h_1af42aab75f8c96643c24f6922e6bb546d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="scitokens_8h_1af42aab75f8c96643c24f6922e6bb546d" kindref="member">SciToken</ref>;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="scitokens_8h_1ab02e75e88eafda93af6ac5e38a3c32a8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="scitokens_8h_1ab02e75e88eafda93af6ac5e38a3c32a8" kindref="member">Validator</ref>;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="scitokens_8h_1a67e3f436486f4d886f493310ff50bb7b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="scitokens_8h_1a67e3f436486f4d886f493310ff50bb7b" kindref="member">Enforcer</ref>;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="scitokens_8h_1a2f79f28f77ae8ea8b7b66e6f72d6e7a8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="scitokens_8h_1a2f79f28f77ae8ea8b7b66e6f72d6e7a8" kindref="member">SciTokenStatus</ref>;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="scitokens_8h_1a6fe41a8d0dccc8c9a9243a4f3b553f3d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="scitokens_8h_1a6fe41a8d0dccc8c9a9243a4f3b553f3d" kindref="member">Configuration</ref>;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="scitokens_8h_1a3105db886f42ff8390bdb3c6bb34c847" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="scitokens_8h_1a3105db886f42ff8390bdb3c6bb34c847" kindref="member">StringValidatorFunction</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*value,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**err_msg);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="structAcl__s" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structAcl__s" kindref="compound">Acl_s</ref><sp/>{</highlight></codeline>
<codeline lineno="40" refid="structAcl__s_1aa3e239ffe81f17c522e3a107fb22d680" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structAcl__s_1aa3e239ffe81f17c522e3a107fb22d680" kindref="member">authz</ref>;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="41" refid="structAcl__s_1accb77910576632f970d8663b93294b06" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structAcl__s_1accb77910576632f970d8663b93294b06" kindref="member">resource</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="42" refid="scitokens_8h_1ac4ba04e6f47ce20a0e59849a8d719f65" refkind="member"><highlight class="normal">}<sp/><ref refid="scitokens_8h_1ac4ba04e6f47ce20a0e59849a8d719f65" kindref="member">Acl</ref>;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="scitokens_8h_1a4bfa5d5157bd4a94e24b8fc265f53275" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="scitokens_8h_1a4bfa5d5157bd4a94e24b8fc265f53275" kindref="member">_profile</ref><sp/>{</highlight></codeline>
<codeline lineno="55" refid="scitokens_8h_1a4bfa5d5157bd4a94e24b8fc265f53275aa9689eb5b95db5a9e7463157f64b7f6b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="scitokens_8h_1a4bfa5d5157bd4a94e24b8fc265f53275aa9689eb5b95db5a9e7463157f64b7f6b" kindref="member">COMPAT</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="56" refid="scitokens_8h_1a4bfa5d5157bd4a94e24b8fc265f53275a93f64ddf1e103cc7888320ae6f9ae83e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="scitokens_8h_1a4bfa5d5157bd4a94e24b8fc265f53275a93f64ddf1e103cc7888320ae6f9ae83e" kindref="member">SCITOKENS_1_0</ref>,</highlight></codeline>
<codeline lineno="57" refid="scitokens_8h_1a4bfa5d5157bd4a94e24b8fc265f53275ab64ec25ac42e7f70db85d90f34f98224" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="scitokens_8h_1a4bfa5d5157bd4a94e24b8fc265f53275ab64ec25ac42e7f70db85d90f34f98224" kindref="member">SCITOKENS_2_0</ref>,</highlight></codeline>
<codeline lineno="58" refid="scitokens_8h_1a4bfa5d5157bd4a94e24b8fc265f53275a3b0f1383e2fc8faa60b53a369b51a0f1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="scitokens_8h_1a4bfa5d5157bd4a94e24b8fc265f53275a3b0f1383e2fc8faa60b53a369b51a0f1" kindref="member">WLCG_1_0</ref>,</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="scitokens_8h_1a4bfa5d5157bd4a94e24b8fc265f53275a6cc7da2f659e5a4eb02eb4774ce60beb" kindref="member">AT_JWT</ref></highlight></codeline>
<codeline lineno="60" refid="scitokens_8h_1a4bfa5d5157bd4a94e24b8fc265f53275a6cc7da2f659e5a4eb02eb4774ce60beb" refkind="member"><highlight class="normal">}<sp/><ref refid="scitokens_8h_1a8b04b0809d15e808d582c78f1b3685e5" kindref="member">SciTokenProfile</ref>;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="scitokens_8h_1a4dbf10b0bb5056c4fd9902a19a01d6ce" refkind="member"><highlight class="normal"><ref refid="scitokens_8h_1a587a66c3a77d6bd135a3d210f1614220" kindref="member">SciTokenKey</ref><sp/><ref refid="scitokens_8h_1a4dbf10b0bb5056c4fd9902a19a01d6ce" kindref="member">scitoken_key_create</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key_id,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*algorithm,</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*public_contents,</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*private_contents,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**err_msg);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="81" refid="scitokens_8h_1a750fdd61f0d8469572b54086f7942d5d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="scitokens_8h_1a750fdd61f0d8469572b54086f7942d5d" kindref="member">scitoken_key_destroy</ref>(<ref refid="scitokens_8h_1a587a66c3a77d6bd135a3d210f1614220" kindref="member">SciTokenKey</ref><sp/>private_key);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="89" refid="scitokens_8h_1ad81d603a6e2564fbfdcd30c633023dac" refkind="member"><highlight class="normal"><ref refid="scitokens_8h_1af42aab75f8c96643c24f6922e6bb546d" kindref="member">SciToken</ref><sp/><ref refid="scitokens_8h_1ad81d603a6e2564fbfdcd30c633023dac" kindref="member">scitoken_create</ref>(<ref refid="scitokens_8h_1a587a66c3a77d6bd135a3d210f1614220" kindref="member">SciTokenKey</ref><sp/>private_key);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="96" refid="scitokens_8h_1ad0d43266bf02f5b048d3c9c156434097" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="scitokens_8h_1ad0d43266bf02f5b048d3c9c156434097" kindref="member">scitoken_destroy</ref>(<ref refid="scitokens_8h_1af42aab75f8c96643c24f6922e6bb546d" kindref="member">SciToken</ref><sp/>token);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="107" refid="scitokens_8h_1ae91f44c6c823e590e65d2d0fbf308d96" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="scitokens_8h_1ae91f44c6c823e590e65d2d0fbf308d96" kindref="member">scitoken_set_claim_string</ref>(<ref refid="scitokens_8h_1af42aab75f8c96643c24f6922e6bb546d" kindref="member">SciToken</ref><sp/>token,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*value,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**err_msg);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="119" refid="scitokens_8h_1abd4ddf5a52941cdff128398f8fe093a6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="scitokens_8h_1abd4ddf5a52941cdff128398f8fe093a6" kindref="member">scitoken_get_claim_string</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="scitokens_8h_1af42aab75f8c96643c24f6922e6bb546d" kindref="member">SciToken</ref><sp/>token,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**value,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**err_msg);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="129" refid="scitokens_8h_1a89974e03db4aa01d1e8441df7bd582a7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="scitokens_8h_1a89974e03db4aa01d1e8441df7bd582a7" kindref="member">scitoken_get_claim_string_list</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="scitokens_8h_1af42aab75f8c96643c24f6922e6bb546d" kindref="member">SciToken</ref><sp/>token,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>***value,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**err_msg);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="136" refid="scitokens_8h_1aefb528bc5ba18e8f1a9ac559093f1738" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="scitokens_8h_1aefb528bc5ba18e8f1a9ac559093f1738" kindref="member">scitoken_free_string_list</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**value);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="141" refid="scitokens_8h_1ae4f779b5b5548f83b8510ce53117513e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="scitokens_8h_1ae4f779b5b5548f83b8510ce53117513e" kindref="member">scitoken_set_claim_string_list</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="scitokens_8h_1af42aab75f8c96643c24f6922e6bb546d" kindref="member">SciToken</ref><sp/>token,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**values,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**err_msg);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="152" refid="scitokens_8h_1a73d8774fa14c47a548de7c997c72599c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="scitokens_8h_1a73d8774fa14c47a548de7c997c72599c" kindref="member">scitoken_get_expiration</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="scitokens_8h_1af42aab75f8c96643c24f6922e6bb546d" kindref="member">SciToken</ref><sp/>token,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*value,</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**err_msg);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="161" refid="scitokens_8h_1a66fbf38d2995020f35a09cce156460c5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="scitokens_8h_1a66fbf38d2995020f35a09cce156460c5" kindref="member">scitoken_set_lifetime</ref>(<ref refid="scitokens_8h_1af42aab75f8c96643c24f6922e6bb546d" kindref="member">SciToken</ref><sp/>token,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lifetime);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="171" refid="scitokens_8h_1a4af64201c33cfffcd0ee0fa1b902722a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="scitokens_8h_1a4af64201c33cfffcd0ee0fa1b902722a" kindref="member">scitoken_serialize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="scitokens_8h_1af42aab75f8c96643c24f6922e6bb546d" kindref="member">SciToken</ref><sp/>token,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**value,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**err_msg);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="177" refid="scitokens_8h_1ad25cde94a1e1013c0ccaf2e4d9a7bf79" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="scitokens_8h_1ad25cde94a1e1013c0ccaf2e4d9a7bf79" kindref="member">scitoken_set_serialize_profile</ref>(<ref refid="scitokens_8h_1af42aab75f8c96643c24f6922e6bb546d" kindref="member">SciToken</ref><sp/>token,<sp/><ref refid="scitokens_8h_1a8b04b0809d15e808d582c78f1b3685e5" kindref="member">SciTokenProfile</ref><sp/>profile);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179" refid="scitokens_8h_1a210865a2ec1211c9fa1bf467f4105fdb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="scitokens_8h_1a210865a2ec1211c9fa1bf467f4105fdb" kindref="member">scitoken_set_serialize_mode</ref>(<ref refid="scitokens_8h_1af42aab75f8c96643c24f6922e6bb546d" kindref="member">SciToken</ref><sp/>token,<sp/><ref refid="scitokens_8h_1a8b04b0809d15e808d582c78f1b3685e5" kindref="member">SciTokenProfile</ref><sp/>profile);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181" refid="scitokens_8h_1af91b6e7b145cb3c6ed98ee8096d719a8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="scitokens_8h_1af91b6e7b145cb3c6ed98ee8096d719a8" kindref="member">scitoken_set_deserialize_profile</ref>(<ref refid="scitokens_8h_1af42aab75f8c96643c24f6922e6bb546d" kindref="member">SciToken</ref><sp/>token,<sp/><ref refid="scitokens_8h_1a8b04b0809d15e808d582c78f1b3685e5" kindref="member">SciTokenProfile</ref><sp/>profile);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="192" refid="scitokens_8h_1a9365ce06a8b29233e0881c4b4ad6ebc3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="scitokens_8h_1a9365ce06a8b29233e0881c4b4ad6ebc3" kindref="member">scitoken_deserialize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*value,<sp/><ref refid="scitokens_8h_1af42aab75f8c96643c24f6922e6bb546d" kindref="member">SciToken</ref><sp/>*token,</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*allowed_issuers,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**err_msg);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="208" refid="scitokens_8h_1a212eb0d2b5b0b37dbe054ea6266282e3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="scitokens_8h_1a212eb0d2b5b0b37dbe054ea6266282e3" kindref="member">scitoken_deserialize_start</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*value,<sp/><ref refid="scitokens_8h_1af42aab75f8c96643c24f6922e6bb546d" kindref="member">SciToken</ref><sp/>*token,</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*allowed_issuers,</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="scitokens_8h_1a2f79f28f77ae8ea8b7b66e6f72d6e7a8" kindref="member">SciTokenStatus</ref><sp/>*status,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**err_msg);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="225" refid="scitokens_8h_1ab2e60eda60afd8f26dc5eacabc0ba8ed" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="scitokens_8h_1ab2e60eda60afd8f26dc5eacabc0ba8ed" kindref="member">scitoken_deserialize_continue</ref>(<ref refid="scitokens_8h_1af42aab75f8c96643c24f6922e6bb546d" kindref="member">SciToken</ref><sp/>*token,<sp/><ref refid="scitokens_8h_1a2f79f28f77ae8ea8b7b66e6f72d6e7a8" kindref="member">SciTokenStatus</ref><sp/>*status,</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**err_msg);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228" refid="scitokens_8h_1adaa0cf2c5a1bcaf1346ac6f232c3314b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="scitokens_8h_1adaa0cf2c5a1bcaf1346ac6f232c3314b" kindref="member">scitoken_deserialize_v2</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*value,<sp/><ref refid="scitokens_8h_1af42aab75f8c96643c24f6922e6bb546d" kindref="member">SciToken</ref><sp/>token,</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*allowed_issuers,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**err_msg);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="240" refid="scitokens_8h_1a6cb89ed8f671919775c4243c57bb8f4b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="scitokens_8h_1a6cb89ed8f671919775c4243c57bb8f4b" kindref="member">scitoken_store_public_ec_key</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*issuer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*keyid,</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*value,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**err_msg);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="248" refid="scitokens_8h_1a263311bb27c645e91cc71cb6fd1b952f" refkind="member"><highlight class="normal"><ref refid="scitokens_8h_1ab02e75e88eafda93af6ac5e38a3c32a8" kindref="member">Validator</ref><sp/><ref refid="scitokens_8h_1a263311bb27c645e91cc71cb6fd1b952f" kindref="member">validator_create</ref>();</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="254" refid="scitokens_8h_1a5b025d947930fbb5a67151e142349c00" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="scitokens_8h_1a5b025d947930fbb5a67151e142349c00" kindref="member">validator_set_token_profile</ref>(<ref refid="scitokens_8h_1ab02e75e88eafda93af6ac5e38a3c32a8" kindref="member">Validator</ref>,<sp/><ref refid="scitokens_8h_1a8b04b0809d15e808d582c78f1b3685e5" kindref="member">SciTokenProfile</ref><sp/>profile);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="260" refid="scitokens_8h_1a829a0927d87a41f590c2a28f366453d9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="scitokens_8h_1a829a0927d87a41f590c2a28f366453d9" kindref="member">validator_set_time</ref>(<ref refid="scitokens_8h_1ab02e75e88eafda93af6ac5e38a3c32a8" kindref="member">Validator</ref><sp/>validator,<sp/>time_t<sp/>now,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**err_msg);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262" refid="scitokens_8h_1a649fda36be429cc0334d6119ca5295a8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="scitokens_8h_1a649fda36be429cc0334d6119ca5295a8" kindref="member">validator_add</ref>(<ref refid="scitokens_8h_1ab02e75e88eafda93af6ac5e38a3c32a8" kindref="member">Validator</ref><sp/>validator,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*claim,</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="scitokens_8h_1a3105db886f42ff8390bdb3c6bb34c847" kindref="member">StringValidatorFunction</ref><sp/>validator_func,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**err_msg);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265" refid="scitokens_8h_1a91fe842050c23da0c63fa5b7acfd2bf6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="scitokens_8h_1a91fe842050c23da0c63fa5b7acfd2bf6" kindref="member">validator_add_critical_claims</ref>(<ref refid="scitokens_8h_1ab02e75e88eafda93af6ac5e38a3c32a8" kindref="member">Validator</ref><sp/>validator,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**claims,</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**err_msg);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="276" refid="scitokens_8h_1aba07f3045591e809d375a23ed8e54ec7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="scitokens_8h_1aba07f3045591e809d375a23ed8e54ec7" kindref="member">validator_validate</ref>(<ref refid="scitokens_8h_1ab02e75e88eafda93af6ac5e38a3c32a8" kindref="member">Validator</ref><sp/>validator,<sp/><ref refid="scitokens_8h_1af42aab75f8c96643c24f6922e6bb546d" kindref="member">SciToken</ref><sp/>scitoken,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**err_msg);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="283" refid="scitokens_8h_1a410e073dee71089ff9fc195e4509e217" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="scitokens_8h_1a410e073dee71089ff9fc195e4509e217" kindref="member">validator_destroy</ref>(<ref refid="scitokens_8h_1ab02e75e88eafda93af6ac5e38a3c32a8" kindref="member">Validator</ref><sp/>validator);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="293" refid="scitokens_8h_1ad76fa52f0bfdb9471b682cc8403a0d9a" refkind="member"><highlight class="normal"><ref refid="scitokens_8h_1a67e3f436486f4d886f493310ff50bb7b" kindref="member">Enforcer</ref><sp/><ref refid="scitokens_8h_1ad76fa52f0bfdb9471b682cc8403a0d9a" kindref="member">enforcer_create</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*issuer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**audience,</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**err_msg);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="301" refid="scitokens_8h_1ae6a595539a4e67041f677ac3435c49fd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="scitokens_8h_1ae6a595539a4e67041f677ac3435c49fd" kindref="member">enforcer_destroy</ref>(<ref refid="scitokens_8h_1a67e3f436486f4d886f493310ff50bb7b" kindref="member">Enforcer</ref><sp/>enforcer);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="308" refid="scitokens_8h_1a876354915918f184cb9be5e7a313e62c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="scitokens_8h_1a876354915918f184cb9be5e7a313e62c" kindref="member">enforcer_set_validate_profile</ref>(<ref refid="scitokens_8h_1a67e3f436486f4d886f493310ff50bb7b" kindref="member">Enforcer</ref>,<sp/><ref refid="scitokens_8h_1a8b04b0809d15e808d582c78f1b3685e5" kindref="member">SciTokenProfile</ref><sp/>profile);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="314" refid="scitokens_8h_1ad26cda252454892adcb502b3d37bd65b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="scitokens_8h_1ad26cda252454892adcb502b3d37bd65b" kindref="member">enforcer_set_time</ref>(<ref refid="scitokens_8h_1a67e3f436486f4d886f493310ff50bb7b" kindref="member">Enforcer</ref><sp/>enf,<sp/>time_t<sp/>now,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**err_msg);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="325" refid="scitokens_8h_1a58db5e24fc281c9392eb399e2b6db3e1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="scitokens_8h_1a58db5e24fc281c9392eb399e2b6db3e1" kindref="member">enforcer_generate_acls</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="scitokens_8h_1a67e3f436486f4d886f493310ff50bb7b" kindref="member">Enforcer</ref><sp/>enf,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="scitokens_8h_1af42aab75f8c96643c24f6922e6bb546d" kindref="member">SciToken</ref><sp/>scitokens,</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structAcl__s" kindref="compound">Acl</ref><sp/>**acls,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**err_msg);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="331" refid="scitokens_8h_1a3112687b8b138b931988e935fb8153c1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="scitokens_8h_1a3112687b8b138b931988e935fb8153c1" kindref="member">enforcer_generate_acls_start</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="scitokens_8h_1a67e3f436486f4d886f493310ff50bb7b" kindref="member">Enforcer</ref><sp/>enf,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="scitokens_8h_1af42aab75f8c96643c24f6922e6bb546d" kindref="member">SciToken</ref><sp/>scitokens,</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="scitokens_8h_1a2f79f28f77ae8ea8b7b66e6f72d6e7a8" kindref="member">SciTokenStatus</ref><sp/>*status,<sp/><ref refid="structAcl__s" kindref="compound">Acl</ref><sp/>**acls,</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**err_msg);</highlight></codeline>
<codeline lineno="334" refid="scitokens_8h_1ae03e2edf4ed381643053aaeff71d92aa" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="scitokens_8h_1ae03e2edf4ed381643053aaeff71d92aa" kindref="member">enforcer_generate_acls_continue</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="scitokens_8h_1a67e3f436486f4d886f493310ff50bb7b" kindref="member">Enforcer</ref><sp/>enf,<sp/><ref refid="scitokens_8h_1a2f79f28f77ae8ea8b7b66e6f72d6e7a8" kindref="member">SciTokenStatus</ref><sp/>*status,</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structAcl__s" kindref="compound">Acl</ref><sp/>**acls,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**err_msg);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="342" refid="scitokens_8h_1a0688be4b49995152aad85abca06376e8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="scitokens_8h_1a0688be4b49995152aad85abca06376e8" kindref="member">enforcer_acl_free</ref>(<ref refid="structAcl__s" kindref="compound">Acl</ref><sp/>*acls);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="353" refid="scitokens_8h_1a5381f795b28a825e9cf3abf9b2b554fc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="scitokens_8h_1a5381f795b28a825e9cf3abf9b2b554fc" kindref="member">enforcer_test</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="scitokens_8h_1a67e3f436486f4d886f493310ff50bb7b" kindref="member">Enforcer</ref><sp/>enf,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="scitokens_8h_1af42aab75f8c96643c24f6922e6bb546d" kindref="member">SciToken</ref><sp/>sci,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structAcl__s" kindref="compound">Acl</ref><sp/>*acl,</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**err_msg);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356" refid="scitokens_8h_1a4932e9e9df2749746eb56f808a2cfef0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="scitokens_8h_1a4932e9e9df2749746eb56f808a2cfef0" kindref="member">scitoken_status_free</ref>(<ref refid="scitokens_8h_1a2f79f28f77ae8ea8b7b66e6f72d6e7a8" kindref="member">SciTokenStatus</ref><sp/>*status);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="366" refid="scitokens_8h_1ad9a299e17fc77f61424cb039bc94cc17" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="scitokens_8h_1ad9a299e17fc77f61424cb039bc94cc17" kindref="member">scitoken_status_get_timeout_val</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="scitokens_8h_1a2f79f28f77ae8ea8b7b66e6f72d6e7a8" kindref="member">SciTokenStatus</ref><sp/>*status,</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time_t<sp/>expiry_time,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>timeval<sp/>*timeout,</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**err_msg);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="381" refid="scitokens_8h_1a416e7d64316e805d82b36659499179b4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="scitokens_8h_1a416e7d64316e805d82b36659499179b4" kindref="member">scitoken_status_get_read_fd_set</ref>(<ref refid="scitokens_8h_1a2f79f28f77ae8ea8b7b66e6f72d6e7a8" kindref="member">SciTokenStatus</ref><sp/>*status,</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fd_set<sp/>**read_fd_set,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**err_msg);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="388" refid="scitokens_8h_1ae7e3b771516aee94c2be1bf1f74a7f79" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="scitokens_8h_1ae7e3b771516aee94c2be1bf1f74a7f79" kindref="member">scitoken_status_get_write_fd_set</ref>(<ref refid="scitokens_8h_1a2f79f28f77ae8ea8b7b66e6f72d6e7a8" kindref="member">SciTokenStatus</ref><sp/>*status,</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fd_set<sp/>**write_fd_set,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**err_msg);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="395" refid="scitokens_8h_1a4104ccf1a5e6ca1ebb59483d34a8a4ae" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="scitokens_8h_1a4104ccf1a5e6ca1ebb59483d34a8a4ae" kindref="member">scitoken_status_get_exc_fd_set</ref>(<ref refid="scitokens_8h_1a2f79f28f77ae8ea8b7b66e6f72d6e7a8" kindref="member">SciTokenStatus</ref><sp/>*status,<sp/>fd_set<sp/>**exc_fd_set,</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**err_msg);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="406" refid="scitokens_8h_1a026202b7833d9f29cf997b3cf51865fe" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="scitokens_8h_1a026202b7833d9f29cf997b3cf51865fe" kindref="member">scitoken_status_get_max_fd</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="scitokens_8h_1a2f79f28f77ae8ea8b7b66e6f72d6e7a8" kindref="member">SciTokenStatus</ref><sp/>*status,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*max_fd,</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**err_msg);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="420" refid="scitokens_8h_1a2a93eb2527b4f2d12f422037efba137a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="scitokens_8h_1a2a93eb2527b4f2d12f422037efba137a" kindref="member">keycache_refresh_jwks</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*issuer,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**err_msg);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="431" refid="scitokens_8h_1ac73ab6cec9a6378d073506d79c5e8df0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="scitokens_8h_1ac73ab6cec9a6378d073506d79c5e8df0" kindref="member">keycache_get_cached_jwks</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*issuer,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**jwks,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**err_msg);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="440" refid="scitokens_8h_1a2543dff33e38e440a1dd706ce288ac55" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="scitokens_8h_1a2543dff33e38e440a1dd706ce288ac55" kindref="member">keycache_set_jwks</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*issuer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*jwks,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**err_msg);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="comment">//<sp/>On<sp/>its<sp/>way<sp/>to<sp/>deprecation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447" refid="scitokens_8h_1a1194e9e69a1e93cd5495a8feb64c7349" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="scitokens_8h_1a1194e9e69a1e93cd5495a8feb64c7349" kindref="member">config_set_int</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**err_msg);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="455" refid="scitokens_8h_1ab86fa82e06a6326fd6697df99f01c4cf" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="scitokens_8h_1ab86fa82e06a6326fd6697df99f01c4cf" kindref="member">scitoken_config_set_int</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**err_msg);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="comment">//<sp/>on<sp/>its<sp/>way<sp/>to<sp/>deprecation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458" refid="scitokens_8h_1a573bb0aab076b67af2fc28c8072c80b2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="scitokens_8h_1a573bb0aab076b67af2fc28c8072c80b2" kindref="member">config_get_int</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**err_msg);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="466" refid="scitokens_8h_1a1abe11e9e964dee82072f7090aa8dcb9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="scitokens_8h_1a1abe11e9e964dee82072f7090aa8dcb9" kindref="member">scitoken_config_get_int</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**err_msg);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="472" refid="scitokens_8h_1aa98d71916cb5f97981b3fdb4097d9eff" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="scitokens_8h_1aa98d71916cb5f97981b3fdb4097d9eff" kindref="member">scitoken_config_set_str</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*value,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**err_msg);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="479" refid="scitokens_8h_1a52cbd78251430971e9077e572ea81748" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="scitokens_8h_1a52cbd78251430971e9077e572ea81748" kindref="member">scitoken_config_get_str</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**output,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**err_msg);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal">}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="src/scitokens.h"/>
  </compounddef>
</doxygen>
